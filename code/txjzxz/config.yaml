
version: 1.0.0

client:

  organization: org1

  logging:
    level: info

  cryptoconfig:
    path: /root/go/src/fabric-go-sdk/fixtures/crypto-config

  credentialStore:

    path: "/tmp/state-store"

    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org1.supervisor.com/users/User1@org1.supervisor.com/tls/client.key
      cert:
        path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org1.supervisor.com/users/User1@org1.supervisor.com/tls/client.crt


channels:



  # multi-org test channel
  allchannel:


    peers:
      peer0.org1.supervisor.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org1.supervisor.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer0.org2.builder.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org2.builder.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer0.org3.supplier1.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org3.supplier1.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer0.org4.supplier2.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org4.supplier2.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer0.org5.supplier3.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org5.supplier3.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer0.org6.logistics.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org6.logistics.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    policies:
      queryChannelConfig:
        minResponses: 1
        maxTargets: 1
        retryOpts:
          attempts: 5
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0
#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: Org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org1.supervisor.com/users/{username}@org1.supervisor.com/msp

    peers:
      - peer0.org1.supervisor.com
      - peer1.org1.supervisor.com

  org2:
    mspid: Org2MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org2.builder.com/users/{username}@org2.builder.com/msp

    peers:
      - peer0.org2.builder.com
      - peer1.org2.builder.com

  org3:
    mspid: Org3MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org3.supplier1.com/users/{username}@org3.supplier1.com/msp

    peers:
      - peer0.org3.supplier1.com
      - peer1.org3.supplier1.com

  org4:
    mspid: Org4MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org4.supplier2.com/users/{username}@org4.supplier2.com/msp

    peers:
      - peer0.org4.supplier2.com
      - peer1.org4.supplier2.com

  org5:
    mspid: Org5MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org5.supplier3.com/users/{username}@org5.supplier3.com/msp

    peers:
      - peer0.org5.supplier3.com
      - peer1.org5.supplier3.com

  org6:
    mspid: Org6MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org6.logistics.com/users/{username}@org6.logistics.com/msp

    peers:
      - peer0.org6.logistics.com
      - peer1.org6.logistics.com






    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.


  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
#  org1:
#    mspid: org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
#    cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

#    peers:
#      - peer0.org1.example.com



  # Orderer Org name
  ordererorg:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp

      orderers:
      - orderer0.example.com
      - orderer1.example.com
      - orderer2.example.com
      - orderer3.example.com
      - orderer4.example.com


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:


  orderer0.example.com:
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer0.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer1.example.com:
    url: 127.0.0.1:8050
    grpcOptions:
      ssl-target-name-override: orderer1.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer2.example.com:
    url: 127.0.0.1:9050
    grpcOptions:
      ssl-target-name-override: orderer2.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer3.example.com:
    url: 127.0.0.1:10050
    grpcOptions:
      ssl-target-name-override: orderer3.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer4.example.com:
    url: 127.0.0.1:11050
    grpcOptions:
      ssl-target-name-override: orderer4.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:


  peer0.org1.supervisor.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:7051
    grpcOptions:
      ssl-target-name-override: peer0.org1.supervisor.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org1.supervisor.com/tlsca/tlsca.org1.supervisor.com-cert.pem


  peer1.org1.supervisor.com:
    url: 127.0.0.1:8051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org1.supervisor.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org1.supervisor.com/tlsca/tlsca.org1.supervisor.com-cert.pem

  peer0.org2.builder.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:9051
    grpcOptions:
      ssl-target-name-override: peer0.org2.builder.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org2.builder.com/tlsca/tlsca.org2.builder.com-cert.pem


  peer1.org2.builder.com:
    url: 127.0.0.1:10051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org2.builder.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org2.builder.com/tlsca/tlsca.org2.builder.com-cert.pem

  peer0.org3.supplier1.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:11051
    grpcOptions:
      ssl-target-name-override: peer0.org3.supplier1.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.supplier1.com/tlsca/tlsca.org3.supplier1.com-cert.pem


  peer1.org3.supplier1.com:
    url: 127.0.0.1:12051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org3.supplier1.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.supplier1.com/tlsca/tlsca.org3.supplier1.com-cert.pem

  peer0.org4.supplier2.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:13051
    grpcOptions:
      ssl-target-name-override: peer0.org4.supplier2.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org4.supplier2.com/tlsca/tlsca.org4.supplier2.com-cert.pem


  peer1.org4.supplier2.com:
    url: 127.0.0.1:14051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org4.supplier2.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org4.supplier2.com/tlsca/tlsca.org4.supplier2.com-cert.pem

  peer0.org5.supplier3.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:15051
    grpcOptions:
      ssl-target-name-override: peer0.org5.supplier3.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org5.supplier3.com/tlsca/tlsca.org5.supplier3.com-cert.pem


  peer1.org5.supplier3.com:
    url: 127.0.0.1:16051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org5.supplier3.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org5.supplier3.com/tlsca/tlsca.org5.supplier3.com-cert.pem

  peer0.org6.logistics.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: 127.0.0.1:17051
    grpcOptions:
      ssl-target-name-override: peer0.org6.logistics.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org6.logistics.com/tlsca/tlsca.org6.logistics.com-cert.pem


  peer1.org6.logistics.com:
    url: 127.0.0.1:18051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org6.logistics.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org6.logistics.com/tlsca/tlsca.org6.logistics.com-cert.pem



#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
entityMatchers:
  peer:

    - pattern: (\w+).org1.supervisor.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:7051
      sslTargetOverrideUrlSubstitutionExp: peer0.org1.supervisor.com
      mappedHost: peer0.org1.supervisor.com

    - pattern: (\w+).org1.supervisor.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:8051
      sslTargetOverrideUrlSubstitutionExp: peer1.org1.supervisor.com
      mappedHost: peer1.org1.supervisor.com

    - pattern: (\w+).org2.builder.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:9051
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.builder.com
      mappedHost: peer0.org2.builder.com

    - pattern: (\w+).org2.builder.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:10051
      sslTargetOverrideUrlSubstitutionExp: peer1.org2.builder.com
      mappedHost: peer1.org2.builder.com

    - pattern: (\w+).org3.supplier1.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:11051
      sslTargetOverrideUrlSubstitutionExp: peer0.org3.supplier1.com
      mappedHost: peer0.org3.supplier1.com

    - pattern: (\w+).org3.supplier1.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:12051
      sslTargetOverrideUrlSubstitutionExp: peer1.org3.supplier1.com
      mappedHost: peer1.org3.supplier1.com

    - pattern: (\w+).org4.supplier2.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:13051
      sslTargetOverrideUrlSubstitutionExp: peer0.org4.supplier2.com
      mappedHost: peer0.org4.supplier2.com

    - pattern: (\w+).org4.supplier2.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:14051
      sslTargetOverrideUrlSubstitutionExp: peer1.org4.supplier2.com
      mappedHost: peer1.org4.supplier2.com

    - pattern: (\w+).org5.supplier3.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:15051
      sslTargetOverrideUrlSubstitutionExp: peer0.org5.supplier3.com
      mappedHost: peer0.org5.supplier3.com

    - pattern: (\w+).org5.supplier3.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:16051
      sslTargetOverrideUrlSubstitutionExp: peer1.org5.supplier3.com
      mappedHost: peer1.org5.supplier3.com

    - pattern: (\w+).org6.logistics.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:17051
      sslTargetOverrideUrlSubstitutionExp: peer0.org6.logistics.com
      mappedHost: peer0.org6.logistics.com

    - pattern: (\w+).org6.logistics.com:(\d+)
      urlSubstitutionExp: 127.0.0.1:18051
      sslTargetOverrideUrlSubstitutionExp: peer1.org6.logistics.com
      mappedHost: peer1.org6.logistics.com

  orderer:
    - pattern: (\w*)orderer0.example.com(\w*)
      urlSubstitutionExp: 127.0.0.1:7050
      sslTargetOverrideUrlSubstitutionExp: orderer0.example.com
      mappedHost: orderer0.example.com

    - pattern: (\w*)orderer1.example.com(\w*)
      urlSubstitutionExp: 127.0.0.1:8050
      sslTargetOverrideUrlSubstitutionExp: orderer1.example.com
      mappedHost: orderer1.example.com

    - pattern: (\w*)orderer2.example.com(\w*)
      urlSubstitutionExp: 127.0.0.1:9050
      sslTargetOverrideUrlSubstitutionExp: orderer2.example.com
      mappedHost: orderer2.example.com

    - pattern: (\w*)orderer3.example.com(\w*)
      urlSubstitutionExp: 127.0.0.1:10050
      sslTargetOverrideUrlSubstitutionExp: orderer3.example.com
      mappedHost: orderer3.example.com

    - pattern: (\w*)orderer4.example.com(\w*)
      urlSubstitutionExp: 127.0.0.1:11050
      sslTargetOverrideUrlSubstitutionExp: orderer4.example.com
      mappedHost: orderer4.example.com
